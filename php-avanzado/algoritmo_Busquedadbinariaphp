Un ejercicio útil para practicar la **búsqueda binaria** podría ser implementar una función que busque un número en una lista ordenada. Aquí te dejo un ejemplo de cómo podría ser el ejercicio:

### Ejercicio: Implementar Búsqueda Binaria

**Descripción:**
Dada una lista ordenada de números enteros, escribe una función en PHP que utilice el algoritmo de búsqueda binaria para encontrar la posición de un número dado en la lista. Si el número no se encuentra en la lista, la función debe devolver `-1`.

**Instrucciones:**
1. Implementa una función llamada `binarySearch`.
2. La función debe recibir dos parámetros: 
   - Un array de números enteros ordenados.
   - El número que se desea buscar.
3. La función debe devolver la posición (índice) del número en el array si lo encuentra.
4. Si el número no está en el array, la función debe devolver `-1`.

**Ejemplo de Entrada:**
`php
$arr = [1, 3, 5, 7, 9, 11, 13];
$target = 7;
```

**Ejemplo de Salida:**
```php
Resultado: 3 (porque 7 está en la posición 3 del array)
```

**Pistas:**
- La búsqueda binaria se basa en dividir repetidamente la lista a la mitad y determinar en qué mitad podría estar el número buscado.
- El proceso se repite hasta encontrar el número o hasta que no quede ninguna mitad que revisar.

### Solución:

<?php
function binarySearch($arr, $target) {
    // Definir los límites iniciales del array
    $left = 0;
    $right = count($arr) - 1;
    
    // Bucle mientras el límite izquierdo sea menor o igual al límite derecho
    while ($left <= $right) {
        // Calcular el punto medio
        $mid = floor(($left + $right) / 2);
        
        // Si el valor medio es igual al objetivo, se encontró el elemento
        if ($arr[$mid] == $target) {
            return $mid;
        }
        // Si el valor medio es menor que el objetivo, ignorar la mitad izquierda
        elseif ($arr[$mid] < $target) {
            $left = $mid + 1;
        }
        // Si el valor medio es mayor que el objetivo, ignorar la mitad derecha
        else {
            $right = $mid - 1;
        }
    }
    
    // Si se sale del bucle, significa que el objetivo no está en el array
    return -1;
}


// Ejemplo de uso
$arr = [1, 3, 5, 7, 9, 11, 13];
$target = 7;
$result = binarySearch($arr, $target);

// Imprimir resultado
if ($result != -1) {
    echo "El número $target se encuentra en la posición $result del array.\n";
} else {
    echo "El número $target no se encuentra en el array.\n";
}
?>


### Explicación del código:

1. **Variables `left` y `right`:** Representan los índices del rango que estamos inspeccionando en cada paso. Comenzamos con `left` en 0 y `right` en el último índice del array.

2. **Cálculo del punto medio `mid`:** Se calcula dividiendo la suma de `left` y `right` por 2. Esto nos da el índice medio del array.

3. **Comparación del valor medio con el objetivo:**
   - Si el valor en `arr[mid]` es igual a `$target`, hemos encontrado el número y devolvemos el índice `mid`.
   - Si el valor en `arr[mid]` es menor que `$target`, entonces sabemos que el número buscado está en la mitad derecha, por lo que movemos el índice `left` a `mid + 1`.
   - Si el valor en `arr[mid]` es mayor que `$target`, entonces el número buscado está en la mitad izquierda, así que movemos `right` a `mid - 1`.

4. **Devolución del resultado:** Si el número se encuentra, se devuelve su posición. Si no, se devuelve `-1`.

